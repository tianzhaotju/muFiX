# Code:
def is_palindrome(string: str) -> bool:
    """ Test if given string is a palindrome """
    return string == string[::-1]
def make_palindrome(string: str) -> str:
    """
    Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    """

# Test Cases:
1. assert make_palindrome('') == ''
This test case checks if an empty string is handled correctly. Since the input string is empty, the expected output is also an empty string.
2. assert make_palindrome('cat') == 'catac'
The function should identify that the longest palindromic suffix of 'cat' is 't'. Then, it should append the reverse of the prefix before the palindromic suffix, which is 'ac'. The expected output is 'cat'+'ac'.
3. assert make_palindrome('cata') == 'catac'
The function should identify that the longest palindromic suffix of 'cata' is 'ata'. Then, it should append the reverse of the prefix before the palindromic suffix, which is 'c'. The expected output is 'cata'+'c'.

# Please complete the code based on the above test cases.